package barebones.ui;

import barebones.Handler;
import barebones.interpreter.Interpreter;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.util.ArrayList;

public class UICodeArea extends UIObject {

    private ArrayList<String> lines;
    private Handler handler;
    private int activeLine = 0, activeChar = 0, barFlash = 30, fontWidth, fontHeight = 1;
    private int fullHeight, runTimer = 0, runTimeMax = 5;
    private double scroll = 0.0;
    private Interpreter inter;
    private boolean running = false;

    public UICodeArea(Handler handler, float x, float y, int width, int height, boolean active) {
        super(x, y, width, height * 5 / 7, active);
        this.handler = handler;
        lines = new ArrayList();
        lines.add("");
    }

    @Override
    public void tick() {
        if (!running) {
            fullHeight = lines.size() * fontHeight;
            //barFlashing
            barFlash--;
            if (barFlash < -30) {
                barFlash = 30;
            }
            //keyBoard
            if (handler.getKeyManager().getJustPressed()[KeyEvent.VK_ENTER]) {
                barFlash = 30;
                activeLine++;
                if (activeLine >= scroll + height / fontHeight) {
                    scroll++;
                }
                String line = lines.get(activeLine - 1);
                lines.set(activeLine - 1, line.substring(0, activeChar));
                insertLine(activeLine, line.substring(activeChar));
                activeChar = 0;
            } else if (handler.getKeyManager().getJustPressed()[KeyEvent.VK_DOWN]) {
                if (activeLine < lines.size() - 1) {
                    activeLine++;
                    if (activeLine >= scroll + height / fontHeight) {
                        scroll++;
                    }
                    barFlash = 30;
                    activeChar = Math.min(activeChar, lines.get(activeLine).length());
                }
            } else if (handler.getKeyManager().getJustPressed()[KeyEvent.VK_UP]) {
                if (activeLine > 0) {
                    activeLine--;
                    if (activeLine <= scroll - 1) {
                        scroll--;
                    }
                    barFlash = 30;
                    activeChar = Math.min(activeChar, lines.get(activeLine).length());
                }
            } else if (handler.getKeyManager().getJustPressed()[KeyEvent.VK_RIGHT]) {
                if (activeChar < lines.get(activeLine).length()) {
                    activeChar++;
                    barFlash = 30;
                }
            } else if (handler.getKeyManager().getJustPressed()[KeyEvent.VK_LEFT]) {
                if (activeChar > 0) {
                    activeChar--;
                    barFlash = 30;
                }
            } else if (handler.getKeyManager().getJustPressed()[KeyEvent.VK_BACK_SPACE]) {
                if (activeChar > 0) {
                    String line = lines.get(activeLine);
                    line = line.substring(0, activeChar - 1) + line.substring(activeChar);
                    lines.set(activeLine, line);
                    activeChar--;
                    barFlash = 30;
                } else if (activeLine > 0) {
                    activeChar = lines.get(activeLine - 1).length();
                    removeLine(activeLine);
                    activeLine--;
                    if (activeLine <= scroll - 1) {
                        scroll--;
                    }
                }
            } else if (handler.getKeyManager().lastChar > 31 && handler.getKeyManager().lastChar < 127) {
//                lines.set(activeLine, lines.get(activeLine) + handler.getKeyManager().lastChar);
                lines.set(activeLine, insertChar(lines.get(activeLine), handler.getKeyManager().lastChar, activeChar));
                handler.getKeyManager().lastChar = 31;
                activeChar++;
                barFlash = 30;
            }
        } else {
            if (runTimer == 0) {
                running = !inter.nextLine();
                if (fullHeight > height) {
                    scroll++;
                    scroll = Math.min(scroll, (fullHeight - height) / fontHeight);
                }
                runTimer = runTimeMax;
            } else {
                runTimer--;
            }
        }
    }
    
    public String insertChar(String line, char c, int pos){
        return line.substring(0, pos) + c + line.substring(pos);
    }

    @Override
    public void render(Graphics g) {
        int yOffset = (int) (scroll * fontHeight);
        //box
        g.setColor(new Color(.5f, .5f, .5f));
        g.fillRect((int) x, (int) y, width, height);
        g.setColor(Color.white);
        g.drawRect((int) x, (int) y, width, height);
        g.setClip(new Rectangle((int) x, (int) y, width, height));
        //font
        g.setFont(new Font("monospaced", 0, 20));
        fontWidth = g.getFontMetrics().stringWidth("0");
        fontHeight = g.getFontMetrics().getHeight();
        //lines
        g.setColor(new Color(.55f, .55f, .55f));
        int lineY = (int) y;
        int gap = g.getFontMetrics().getHeight();
        for (int i = 0; i < lines.size(); i++) {
            lineY += gap;
            g.drawLine((int) x + 1, lineY - yOffset, (int) x + width - 2, lineY - yOffset);
        }
        //margin
        g.setColor(new Color(.7f, .7f, .7f));
        int marginX = (int) (x + fontWidth * (Math.ceil(Math.log10(lines.size() + 1))));
        g.drawLine(marginX, (int) y + 1, marginX, (int) y + height - 2);
        lineY = (int) y - gap / 4;
        g.setColor(new Color(.8f, .8f, .8f));
        for (int i = 0; i < lines.size(); i++) {
            int n = (int) Math.ceil(Math.log10(lines.size() + 1));
            String num = String.format("%0" + n + "d%n", i);
            lineY += gap;
            g.drawString(num, (int) x, lineY - yOffset);
        }
        //text
        g.setColor(Color.white);
        lineY = (int) y + gap * 3 / 4;
        for (int i = 0; i < lines.size(); i++) {
            String s = lines.get(i);
            g.drawString(s, marginX + 5, lineY - yOffset);
            lineY += gap;
        }
        //highlight
        if (running) {
            g.setColor(new Color(1f, 1f, 1f, 0.2f));
            g.fillRect((int) x, (int) y + gap * inter.lineNo - yOffset, width, gap);
        }
        //bar
        g.setColor(Color.white);
        if (barFlash > 0 && !running) {
            g.fillRect(marginX + 5 + fontWidth * activeChar, (int) y + 3 + gap * activeLine - yOffset, 2, gap - 4);
        }
        //clip
        g.setClip(new Rectangle(0, 0, handler.getWidth(), handler.getHeight()));
        //interpreter
        if (inter != null){
            inter.render(g, (int)x, (int)y + height, width, height * 2 / 5);
        }
    }

    private void insertLine(int line, String s) {
        ArrayList<String> newLines = new ArrayList();
        for (int i = 0; i < lines.size() + 1; i++) {
            if (i > line) {
                newLines.add(lines.get(i - 1));
            } else if (i < line) {
                newLines.add(lines.get(i));
            } else {
                newLines.add(s);
            }
        }
        lines = newLines;
    }

    private void removeLine(int line) {
        lines.set(line - 1, lines.get(line - 1) + lines.get(line));
        lines.remove(line);
    }

    @Override
    protected void onClick() {
        int yOffset = (int) (scroll * fontHeight);
        int mouseX = handler.getMouseManager().getMouseX();
        int mouseY = handler.getMouseManager().getMouseY();
        mouseX -= x;
        mouseY -= y;
        mouseY += yOffset;
        mouseX /= fontWidth;
        mouseY /= fontHeight;
        mouseX -= 1;
        mouseX = Math.max(mouseX, 0);
        mouseY = Math.max(mouseY, 0);
        activeLine = Math.min(lines.size() - 1, mouseY);
        activeChar = Math.min(lines.get(activeLine).length(), mouseX);
    }

    @Override
    public void scroll(int s) {
        if (fullHeight > height) {
            scroll += s;
            scroll = Math.min(scroll, (fullHeight - height) / fontHeight);
            scroll = Math.max(scroll, 0);
        } else {
            scroll = 0;
        }
    }

    public void run() {
        inter = new Interpreter(lines);
        running = true;
        scroll = 0;
        runTimer = runTimeMax;
    }

    public Interpreter getInter() {
        return inter;
    }

    public boolean isRunning() {
        return running;
    }

}
