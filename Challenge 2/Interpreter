package barebones.interpreter;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

public class Interpreter {

    private ArrayList<Variable> variables;
    private ArrayList<Loop> loopStack;
    private ArrayList<String> code;
    public int lineNo = 0;

    public Interpreter(ArrayList<String> code) {
        this.code = code;
        variables = new ArrayList<>();
        loopStack = new ArrayList<>();
    }
    
    public void render(Graphics g, int x, int y, int width, int height){
        g.setColor(Color.black);
        g.fillRect(x, y, width, height);
        g.setColor(Color.white);
        for (int i = 0; i < variables.size(); i++) {
            String text = variables.get(i).name + " = " + variables.get(i).value;
            int tx = x + width / 2 - g.getFontMetrics().stringWidth(text) / 2;
            int ty = y + height / 2 - variables.size() / 2 * g.getFontMetrics().getHeight() + i * g.getFontMetrics().getHeight();
            g.drawString(text, tx, ty);
        }
        g.drawRect(x, y, width, height);
    }

    public boolean nextLine() {
        String line = code.get(lineNo);
        if (line.endsWith(";")) {
            String[] lineParts = line.split(" ");
            if (lineParts[0].equals("clear")) {
                clear(getVariable(lineParts[1].split(";")[0]));
            } else if (lineParts[0].equals("inc")) {
                inc(getVariable(lineParts[1].split(";")[0]));
            } else if (lineParts[0].equals("dec")) {
                dec(getVariable(lineParts[1].split(";")[0]));
            } else if (line.equals("end;")) {
                Loop loop = loopStack.get(loopStack.size() - 1);
                if (!loop.isDone()) {
                    lineNo = loop.lineNo;
                } else {
                    loopStack.remove(loopStack.size() - 1);
                }
            } else if (lineParts[0].equals("while") && (lineParts[2] + lineParts[3] + lineParts[4]).equals("not0do;")) {
                loopStack.add(new Loop(getVariable(lineParts[1]), lineNo));
                if (loopStack.get(loopStack.size() - 1).isDone()) {
                    while (!line.equals("end;")) {
                        lineNo++;
                        line = code.get(lineNo);
                    }
                    loopStack.remove(loopStack.size() - 1);
                }
            }
        } else {
            System.out.println("No \";\" !!!");
        }
        lineNo++;
        
        return code.size() == lineNo;
    }

    public Variable getVariable(String name) {
        for (Variable variable : variables) {
            if (variable.name.equals(name)) {
                return variable;
            }
        }
        Variable v = new Variable(name);
        variables.add(v);
        return v;
    }

    public void clear(Variable var) {
        var.value = 0;
    }

    public void inc(Variable var) {
        var.value++;
    }

    public void dec(Variable var) {
        if (var.value > 0) {
            var.value--;
        } else {
            System.out.println("Variables must be non-negative.");
        }
    }

    public class Variable {

        public String name;
        public int value = 0;

        public Variable(String name) {
            this.name = name;
        }

    }

    public class Loop {

        public Variable var;
        public int lineNo;

        public Loop(Variable var, int lineNo) {
            this.var = var;
            this.lineNo = lineNo;
        }

        public boolean isDone() {
            return var.value == 0;
        }

    }

    public ArrayList<Variable> getVariables() {
        return variables;
    }

}
